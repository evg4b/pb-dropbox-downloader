package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i pb-dropbox-downloader/internal/dropbox.DropboxFiles -o ./mocks\dropbox_filesmock.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/tj/go-dropbox"
)

// DropboxFilesMock implements dropbox.DropboxFiles
type DropboxFilesMock struct {
	t minimock.Tester

	funcDownload          func(in *dropbox.DownloadInput) (out *dropbox.DownloadOutput, err error)
	inspectFuncDownload   func(in *dropbox.DownloadInput)
	afterDownloadCounter  uint64
	beforeDownloadCounter uint64
	DownloadMock          mDropboxFilesMockDownload

	funcListFolder          func(in *dropbox.ListFolderInput) (out *dropbox.ListFolderOutput, err error)
	inspectFuncListFolder   func(in *dropbox.ListFolderInput)
	afterListFolderCounter  uint64
	beforeListFolderCounter uint64
	ListFolderMock          mDropboxFilesMockListFolder
}

// NewDropboxFilesMock returns a mock for dropbox.DropboxFiles
func NewDropboxFilesMock(t minimock.Tester) *DropboxFilesMock {
	m := &DropboxFilesMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DownloadMock = mDropboxFilesMockDownload{mock: m}
	m.DownloadMock.callArgs = []*DropboxFilesMockDownloadParams{}

	m.ListFolderMock = mDropboxFilesMockListFolder{mock: m}
	m.ListFolderMock.callArgs = []*DropboxFilesMockListFolderParams{}

	return m
}

type mDropboxFilesMockDownload struct {
	mock               *DropboxFilesMock
	defaultExpectation *DropboxFilesMockDownloadExpectation
	expectations       []*DropboxFilesMockDownloadExpectation

	callArgs []*DropboxFilesMockDownloadParams
	mutex    sync.RWMutex
}

// DropboxFilesMockDownloadExpectation specifies expectation struct of the DropboxFiles.Download
type DropboxFilesMockDownloadExpectation struct {
	mock    *DropboxFilesMock
	params  *DropboxFilesMockDownloadParams
	results *DropboxFilesMockDownloadResults
	Counter uint64
}

// DropboxFilesMockDownloadParams contains parameters of the DropboxFiles.Download
type DropboxFilesMockDownloadParams struct {
	in *dropbox.DownloadInput
}

// DropboxFilesMockDownloadResults contains results of the DropboxFiles.Download
type DropboxFilesMockDownloadResults struct {
	out *dropbox.DownloadOutput
	err error
}

// Expect sets up expected params for DropboxFiles.Download
func (mmDownload *mDropboxFilesMockDownload) Expect(in *dropbox.DownloadInput) *mDropboxFilesMockDownload {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DropboxFilesMock.Download mock is already set by Set")
	}

	if mmDownload.defaultExpectation == nil {
		mmDownload.defaultExpectation = &DropboxFilesMockDownloadExpectation{}
	}

	mmDownload.defaultExpectation.params = &DropboxFilesMockDownloadParams{in}
	for _, e := range mmDownload.expectations {
		if minimock.Equal(e.params, mmDownload.defaultExpectation.params) {
			mmDownload.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDownload.defaultExpectation.params)
		}
	}

	return mmDownload
}

// Inspect accepts an inspector function that has same arguments as the DropboxFiles.Download
func (mmDownload *mDropboxFilesMockDownload) Inspect(f func(in *dropbox.DownloadInput)) *mDropboxFilesMockDownload {
	if mmDownload.mock.inspectFuncDownload != nil {
		mmDownload.mock.t.Fatalf("Inspect function is already set for DropboxFilesMock.Download")
	}

	mmDownload.mock.inspectFuncDownload = f

	return mmDownload
}

// Return sets up results that will be returned by DropboxFiles.Download
func (mmDownload *mDropboxFilesMockDownload) Return(out *dropbox.DownloadOutput, err error) *DropboxFilesMock {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DropboxFilesMock.Download mock is already set by Set")
	}

	if mmDownload.defaultExpectation == nil {
		mmDownload.defaultExpectation = &DropboxFilesMockDownloadExpectation{mock: mmDownload.mock}
	}
	mmDownload.defaultExpectation.results = &DropboxFilesMockDownloadResults{out, err}
	return mmDownload.mock
}

//Set uses given function f to mock the DropboxFiles.Download method
func (mmDownload *mDropboxFilesMockDownload) Set(f func(in *dropbox.DownloadInput) (out *dropbox.DownloadOutput, err error)) *DropboxFilesMock {
	if mmDownload.defaultExpectation != nil {
		mmDownload.mock.t.Fatalf("Default expectation is already set for the DropboxFiles.Download method")
	}

	if len(mmDownload.expectations) > 0 {
		mmDownload.mock.t.Fatalf("Some expectations are already set for the DropboxFiles.Download method")
	}

	mmDownload.mock.funcDownload = f
	return mmDownload.mock
}

// When sets expectation for the DropboxFiles.Download which will trigger the result defined by the following
// Then helper
func (mmDownload *mDropboxFilesMockDownload) When(in *dropbox.DownloadInput) *DropboxFilesMockDownloadExpectation {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DropboxFilesMock.Download mock is already set by Set")
	}

	expectation := &DropboxFilesMockDownloadExpectation{
		mock:   mmDownload.mock,
		params: &DropboxFilesMockDownloadParams{in},
	}
	mmDownload.expectations = append(mmDownload.expectations, expectation)
	return expectation
}

// Then sets up DropboxFiles.Download return parameters for the expectation previously defined by the When method
func (e *DropboxFilesMockDownloadExpectation) Then(out *dropbox.DownloadOutput, err error) *DropboxFilesMock {
	e.results = &DropboxFilesMockDownloadResults{out, err}
	return e.mock
}

// Download implements dropbox.DropboxFiles
func (mmDownload *DropboxFilesMock) Download(in *dropbox.DownloadInput) (out *dropbox.DownloadOutput, err error) {
	mm_atomic.AddUint64(&mmDownload.beforeDownloadCounter, 1)
	defer mm_atomic.AddUint64(&mmDownload.afterDownloadCounter, 1)

	if mmDownload.inspectFuncDownload != nil {
		mmDownload.inspectFuncDownload(in)
	}

	mm_params := &DropboxFilesMockDownloadParams{in}

	// Record call args
	mmDownload.DownloadMock.mutex.Lock()
	mmDownload.DownloadMock.callArgs = append(mmDownload.DownloadMock.callArgs, mm_params)
	mmDownload.DownloadMock.mutex.Unlock()

	for _, e := range mmDownload.DownloadMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.out, e.results.err
		}
	}

	if mmDownload.DownloadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDownload.DownloadMock.defaultExpectation.Counter, 1)
		mm_want := mmDownload.DownloadMock.defaultExpectation.params
		mm_got := DropboxFilesMockDownloadParams{in}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDownload.t.Errorf("DropboxFilesMock.Download got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDownload.DownloadMock.defaultExpectation.results
		if mm_results == nil {
			mmDownload.t.Fatal("No results are set for the DropboxFilesMock.Download")
		}
		return (*mm_results).out, (*mm_results).err
	}
	if mmDownload.funcDownload != nil {
		return mmDownload.funcDownload(in)
	}
	mmDownload.t.Fatalf("Unexpected call to DropboxFilesMock.Download. %v", in)
	return
}

// DownloadAfterCounter returns a count of finished DropboxFilesMock.Download invocations
func (mmDownload *DropboxFilesMock) DownloadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDownload.afterDownloadCounter)
}

// DownloadBeforeCounter returns a count of DropboxFilesMock.Download invocations
func (mmDownload *DropboxFilesMock) DownloadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDownload.beforeDownloadCounter)
}

// Calls returns a list of arguments used in each call to DropboxFilesMock.Download.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDownload *mDropboxFilesMockDownload) Calls() []*DropboxFilesMockDownloadParams {
	mmDownload.mutex.RLock()

	argCopy := make([]*DropboxFilesMockDownloadParams, len(mmDownload.callArgs))
	copy(argCopy, mmDownload.callArgs)

	mmDownload.mutex.RUnlock()

	return argCopy
}

// MinimockDownloadDone returns true if the count of the Download invocations corresponds
// the number of defined expectations
func (m *DropboxFilesMock) MinimockDownloadDone() bool {
	for _, e := range m.DownloadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DownloadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDownloadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDownload != nil && mm_atomic.LoadUint64(&m.afterDownloadCounter) < 1 {
		return false
	}
	return true
}

// MinimockDownloadInspect logs each unmet expectation
func (m *DropboxFilesMock) MinimockDownloadInspect() {
	for _, e := range m.DownloadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DropboxFilesMock.Download with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DownloadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDownloadCounter) < 1 {
		if m.DownloadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DropboxFilesMock.Download")
		} else {
			m.t.Errorf("Expected call to DropboxFilesMock.Download with params: %#v", *m.DownloadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDownload != nil && mm_atomic.LoadUint64(&m.afterDownloadCounter) < 1 {
		m.t.Error("Expected call to DropboxFilesMock.Download")
	}
}

type mDropboxFilesMockListFolder struct {
	mock               *DropboxFilesMock
	defaultExpectation *DropboxFilesMockListFolderExpectation
	expectations       []*DropboxFilesMockListFolderExpectation

	callArgs []*DropboxFilesMockListFolderParams
	mutex    sync.RWMutex
}

// DropboxFilesMockListFolderExpectation specifies expectation struct of the DropboxFiles.ListFolder
type DropboxFilesMockListFolderExpectation struct {
	mock    *DropboxFilesMock
	params  *DropboxFilesMockListFolderParams
	results *DropboxFilesMockListFolderResults
	Counter uint64
}

// DropboxFilesMockListFolderParams contains parameters of the DropboxFiles.ListFolder
type DropboxFilesMockListFolderParams struct {
	in *dropbox.ListFolderInput
}

// DropboxFilesMockListFolderResults contains results of the DropboxFiles.ListFolder
type DropboxFilesMockListFolderResults struct {
	out *dropbox.ListFolderOutput
	err error
}

// Expect sets up expected params for DropboxFiles.ListFolder
func (mmListFolder *mDropboxFilesMockListFolder) Expect(in *dropbox.ListFolderInput) *mDropboxFilesMockListFolder {
	if mmListFolder.mock.funcListFolder != nil {
		mmListFolder.mock.t.Fatalf("DropboxFilesMock.ListFolder mock is already set by Set")
	}

	if mmListFolder.defaultExpectation == nil {
		mmListFolder.defaultExpectation = &DropboxFilesMockListFolderExpectation{}
	}

	mmListFolder.defaultExpectation.params = &DropboxFilesMockListFolderParams{in}
	for _, e := range mmListFolder.expectations {
		if minimock.Equal(e.params, mmListFolder.defaultExpectation.params) {
			mmListFolder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListFolder.defaultExpectation.params)
		}
	}

	return mmListFolder
}

// Inspect accepts an inspector function that has same arguments as the DropboxFiles.ListFolder
func (mmListFolder *mDropboxFilesMockListFolder) Inspect(f func(in *dropbox.ListFolderInput)) *mDropboxFilesMockListFolder {
	if mmListFolder.mock.inspectFuncListFolder != nil {
		mmListFolder.mock.t.Fatalf("Inspect function is already set for DropboxFilesMock.ListFolder")
	}

	mmListFolder.mock.inspectFuncListFolder = f

	return mmListFolder
}

// Return sets up results that will be returned by DropboxFiles.ListFolder
func (mmListFolder *mDropboxFilesMockListFolder) Return(out *dropbox.ListFolderOutput, err error) *DropboxFilesMock {
	if mmListFolder.mock.funcListFolder != nil {
		mmListFolder.mock.t.Fatalf("DropboxFilesMock.ListFolder mock is already set by Set")
	}

	if mmListFolder.defaultExpectation == nil {
		mmListFolder.defaultExpectation = &DropboxFilesMockListFolderExpectation{mock: mmListFolder.mock}
	}
	mmListFolder.defaultExpectation.results = &DropboxFilesMockListFolderResults{out, err}
	return mmListFolder.mock
}

//Set uses given function f to mock the DropboxFiles.ListFolder method
func (mmListFolder *mDropboxFilesMockListFolder) Set(f func(in *dropbox.ListFolderInput) (out *dropbox.ListFolderOutput, err error)) *DropboxFilesMock {
	if mmListFolder.defaultExpectation != nil {
		mmListFolder.mock.t.Fatalf("Default expectation is already set for the DropboxFiles.ListFolder method")
	}

	if len(mmListFolder.expectations) > 0 {
		mmListFolder.mock.t.Fatalf("Some expectations are already set for the DropboxFiles.ListFolder method")
	}

	mmListFolder.mock.funcListFolder = f
	return mmListFolder.mock
}

// When sets expectation for the DropboxFiles.ListFolder which will trigger the result defined by the following
// Then helper
func (mmListFolder *mDropboxFilesMockListFolder) When(in *dropbox.ListFolderInput) *DropboxFilesMockListFolderExpectation {
	if mmListFolder.mock.funcListFolder != nil {
		mmListFolder.mock.t.Fatalf("DropboxFilesMock.ListFolder mock is already set by Set")
	}

	expectation := &DropboxFilesMockListFolderExpectation{
		mock:   mmListFolder.mock,
		params: &DropboxFilesMockListFolderParams{in},
	}
	mmListFolder.expectations = append(mmListFolder.expectations, expectation)
	return expectation
}

// Then sets up DropboxFiles.ListFolder return parameters for the expectation previously defined by the When method
func (e *DropboxFilesMockListFolderExpectation) Then(out *dropbox.ListFolderOutput, err error) *DropboxFilesMock {
	e.results = &DropboxFilesMockListFolderResults{out, err}
	return e.mock
}

// ListFolder implements dropbox.DropboxFiles
func (mmListFolder *DropboxFilesMock) ListFolder(in *dropbox.ListFolderInput) (out *dropbox.ListFolderOutput, err error) {
	mm_atomic.AddUint64(&mmListFolder.beforeListFolderCounter, 1)
	defer mm_atomic.AddUint64(&mmListFolder.afterListFolderCounter, 1)

	if mmListFolder.inspectFuncListFolder != nil {
		mmListFolder.inspectFuncListFolder(in)
	}

	mm_params := &DropboxFilesMockListFolderParams{in}

	// Record call args
	mmListFolder.ListFolderMock.mutex.Lock()
	mmListFolder.ListFolderMock.callArgs = append(mmListFolder.ListFolderMock.callArgs, mm_params)
	mmListFolder.ListFolderMock.mutex.Unlock()

	for _, e := range mmListFolder.ListFolderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.out, e.results.err
		}
	}

	if mmListFolder.ListFolderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListFolder.ListFolderMock.defaultExpectation.Counter, 1)
		mm_want := mmListFolder.ListFolderMock.defaultExpectation.params
		mm_got := DropboxFilesMockListFolderParams{in}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListFolder.t.Errorf("DropboxFilesMock.ListFolder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListFolder.ListFolderMock.defaultExpectation.results
		if mm_results == nil {
			mmListFolder.t.Fatal("No results are set for the DropboxFilesMock.ListFolder")
		}
		return (*mm_results).out, (*mm_results).err
	}
	if mmListFolder.funcListFolder != nil {
		return mmListFolder.funcListFolder(in)
	}
	mmListFolder.t.Fatalf("Unexpected call to DropboxFilesMock.ListFolder. %v", in)
	return
}

// ListFolderAfterCounter returns a count of finished DropboxFilesMock.ListFolder invocations
func (mmListFolder *DropboxFilesMock) ListFolderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListFolder.afterListFolderCounter)
}

// ListFolderBeforeCounter returns a count of DropboxFilesMock.ListFolder invocations
func (mmListFolder *DropboxFilesMock) ListFolderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListFolder.beforeListFolderCounter)
}

// Calls returns a list of arguments used in each call to DropboxFilesMock.ListFolder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListFolder *mDropboxFilesMockListFolder) Calls() []*DropboxFilesMockListFolderParams {
	mmListFolder.mutex.RLock()

	argCopy := make([]*DropboxFilesMockListFolderParams, len(mmListFolder.callArgs))
	copy(argCopy, mmListFolder.callArgs)

	mmListFolder.mutex.RUnlock()

	return argCopy
}

// MinimockListFolderDone returns true if the count of the ListFolder invocations corresponds
// the number of defined expectations
func (m *DropboxFilesMock) MinimockListFolderDone() bool {
	for _, e := range m.ListFolderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListFolderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListFolderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListFolder != nil && mm_atomic.LoadUint64(&m.afterListFolderCounter) < 1 {
		return false
	}
	return true
}

// MinimockListFolderInspect logs each unmet expectation
func (m *DropboxFilesMock) MinimockListFolderInspect() {
	for _, e := range m.ListFolderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DropboxFilesMock.ListFolder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListFolderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListFolderCounter) < 1 {
		if m.ListFolderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DropboxFilesMock.ListFolder")
		} else {
			m.t.Errorf("Expected call to DropboxFilesMock.ListFolder with params: %#v", *m.ListFolderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListFolder != nil && mm_atomic.LoadUint64(&m.afterListFolderCounter) < 1 {
		m.t.Error("Expected call to DropboxFilesMock.ListFolder")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DropboxFilesMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDownloadInspect()

		m.MinimockListFolderInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DropboxFilesMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DropboxFilesMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDownloadDone() &&
		m.MinimockListFolderDone()
}
